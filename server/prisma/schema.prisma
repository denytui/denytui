// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum RoleType {
  ADMIN
  USER
}

enum MessageType {
  FRIEND
  GROUP
}

enum ContentType {
  TEXT
  FILE
}

model User {
  id                        String   @id @default(cuid())
  username                  String   @unique
  email                     String   @unique
  password                  String
  role                      RoleType @default(USER)
  avatar                    String   @default("https://i.imgur.com/TdTtqJ2.png")
  intro                     String   @default("Hello world!")
  sex                       String?  @default("male")
  address                   String?
  active                    Boolean  @default(false)
  currentHashedRefreshToken String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  files         File[]
  groups        Group[]
  groupMessages GroupMessage[]

  senderFriendMessages   FriendMessage[] @relation("senderFriendMessages")
  receiverFriendMessages FriendMessage[] @relation("receiverFriendMessages")
  userFriends            User[]          @relation("userFriends")

  userFriend   User?   @relation("userFriends", fields: [userFriendId], references: [id])
  userFriendId String?
  @@map("users")
}

model File {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  fileName String
}

model Group {
  id             String         @id @default(cuid())
  avatar         String         @default("https://i.imgur.com/Vih6Km5.png")
  groupName      String
  groupManager   User           @relation(fields: [groupManagerId], references: [id])
  groupManagerId String
  intro          String?        @default("The group owner is very lazy and didn't write an announcement")
  groupMessages  GroupMessage[]


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("groups")
}

model GroupMessage {
  id String @id @default(cuid())

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  group   Group?  @relation(fields: [groupId], references: [id])
  groupId String?

  content     String
  type        ContentType @default(TEXT)
  messageType MessageType @default(GROUP)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


}

model FriendMessage {
  id String @id @default(cuid())

  sender   User   @relation("senderFriendMessages", fields: [senderId], references: [id])
  senderId String

  receiver   User   @relation("receiverFriendMessages", fields: [receiverId], references: [id])
  receiverId String

  content     String
  type        ContentType @default(TEXT)
  messageType MessageType @default(FRIEND)


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}
